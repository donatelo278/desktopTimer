from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QPushButton, QComboBox, QMessageBox, QTabWidget,
                             QTableWidget, QTableWidgetItem, QDialog, QLineEdit, QDialogButtonBox,
                            QMessageBox, QInputDialog)
from PyQt5.QtCore import QTimer, Qt
from models import Project, Task, TimeRecord
from database import Database
from timer_logic import Timer
from datetime import datetime


class TimerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = Database()
        self.timer = Timer(self.on_timer_end)
        self.current_task_id = None

        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_project_btn = None
        self.edit_project_btn = None
        self.del_project_btn = None
        self.add_task_btn = None
        self.edit_task_btn = None
        self.del_task_btn = None

        self.setup_ui()
        self.setup_timers()

    def setup_ui(self):
        self.setWindowTitle("Task Timer")
        self.setGeometry(100, 100, 600, 400)

        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_management_buttons()

        # –í–∫–ª–∞–¥–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        self.setup_timer_tab()

        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.setup_stats_tab()

    def setup_management_buttons(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ layout)"""
        self.add_project_btn = QPushButton("+ –ü—Ä–æ–µ–∫—Ç")
        self.edit_project_btn = QPushButton("‚úé –ü—Ä–æ–µ–∫—Ç")
        self.del_project_btn = QPushButton("üóë –ü—Ä–æ–µ–∫—Ç")
        self.add_task_btn = QPushButton("+ –ó–∞–¥–∞—á–∞")
        self.edit_task_btn = QPushButton("‚úé –ó–∞–¥–∞—á–∞")
        self.del_task_btn = QPushButton("üóë –ó–∞–¥–∞—á–∞")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.add_project_btn.clicked.connect(self.add_project)
        self.edit_project_btn.clicked.connect(self.edit_project)
        self.del_project_btn.clicked.connect(self.delete_project)
        self.add_task_btn.clicked.connect(self.add_task)
        self.edit_task_btn.clicked.connect(self.edit_task)
        self.del_task_btn.clicked.connect(self.delete_task)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.edit_project_btn.setEnabled(False)
        self.del_project_btn.setEnabled(False)
        self.add_task_btn.setEnabled(False)
        self.edit_task_btn.setEnabled(False)
        self.del_task_btn.setEnabled(False)

    def setup_timer_tab(self):
        timer_tab = QWidget()
        timer_layout = QVBoxLayout(timer_tab)

        # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        self.project_combo = QComboBox()
        self.update_projects_combo()
        timer_layout.addWidget(QLabel("–ü—Ä–æ–µ–∫—Ç:"))
        timer_layout.addWidget(self.project_combo)

        # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
        self.task_combo = QComboBox()
        timer_layout.addWidget(QLabel("–ó–∞–¥–∞—á–∞:"))
        timer_layout.addWidget(self.task_combo)
        self.project_combo.currentIndexChanged.connect(self.update_tasks_combo)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏/–∑–∞–¥–∞—á–∞–º–∏
        buttons_container = QWidget()
        mgmt_layout = QHBoxLayout(buttons_container)
        mgmt_layout.addWidget(self.add_project_btn)
        mgmt_layout.addWidget(self.edit_project_btn)
        mgmt_layout.addWidget(self.del_project_btn)
        mgmt_layout.addWidget(QLabel(" | "))
        mgmt_layout.addWidget(self.add_task_btn)
        mgmt_layout.addWidget(self.edit_task_btn)
        mgmt_layout.addWidget(self.del_task_btn)
        timer_layout.addWidget(buttons_container)

        # –¢–∞–π–º–µ—Ä
        self.timer_label = QLabel("00:00:00")
        self.timer_label.setAlignment(Qt.AlignCenter)
        self.timer_label.setStyleSheet("font-size: 36px;")
        timer_layout.addWidget(self.timer_label)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        timer_buttons = QHBoxLayout()
        self.start_button = QPushButton("–°—Ç–∞—Ä—Ç")
        self.pause_button = QPushButton("–ü–∞—É–∑–∞")
        self.reset_button = QPushButton("–°–±—Ä–æ—Å")

        self.start_button.clicked.connect(self.start_timer)
        self.pause_button.clicked.connect(self.pause_timer)
        self.reset_button.clicked.connect(self.reset_timer)

        timer_buttons.addWidget(self.start_button)
        timer_buttons.addWidget(self.pause_button)
        timer_buttons.addWidget(self.reset_button)

        timer_layout.addLayout(timer_buttons)
        self.tabs.addTab(timer_tab, "–¢–∞–π–º–µ—Ä")

    def setup_stats_tab(self):
        stats_tab = QWidget()
        stats_layout = QVBoxLayout(stats_tab)

        self.stats_table = QTableWidget()
        self.stats_table.setColumnCount(5)
        self.stats_table.setHorizontalHeaderLabels(["–ü—Ä–æ–µ–∫—Ç", "–ó–∞–¥–∞—á–∞", "–í—Ä–µ–º—è", "–î–∞—Ç–∞", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ"])
        stats_layout.addWidget(self.stats_table)

        self.tabs.addTab(stats_tab, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.update_stats_table()

    def setup_timers(self):
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.display_timer = QTimer(self)
        self.display_timer.timeout.connect(self.update_display)
        self.display_timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        self.check_timer = QTimer(self)
        self.check_timer.timeout.connect(self.check_work_time)
        self.check_timer.start(1000)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

    def update_projects_combo(self):
        self.project_combo.clear()
        projects = self.db.get_projects()
        for project in projects:
            self.project_combo.addItem(project.name, project.id)

    def update_tasks_combo(self):
        self.task_combo.clear()
        project_id = self.project_combo.currentData()
        if project_id:
            tasks = self.db.get_tasks_for_project(project_id)
            for task in tasks:
                self.task_combo.addItem(task.name, task.id)

    def update_display(self):
        elapsed = self.timer.get_elapsed_time()
        self.timer_label.setText(self.timer.format_time(elapsed))

    def check_work_time(self):
        if self.timer.is_running:
            self.timer.check_timer()

    def start_timer(self):
        if self.task_combo.currentIndex() == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        self.current_task_id = self.task_combo.currentData()
        self.timer.start()

    def pause_timer(self):
        self.timer.pause()

    def reset_timer(self):
        self.timer.reset()

    def on_timer_end(self, elapsed_seconds: int):
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–í—ã —Ä–∞–±–æ—Ç–∞–ª–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        was_productive = reply == QMessageBox.Yes

        if was_productive:
            start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            end_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.db.add_time_record(
                task_id=self.current_task_id,
                start_time=start_time,
                end_time=end_time,
                duration_seconds=elapsed_seconds,
                was_productive=was_productive
            )
            self.update_stats_table()

        self.timer.reset()

    def update_stats_table(self):
        self.stats_table.setRowCount(0)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö
        cursor = self.db.conn.cursor()
        cursor.execute('''
        SELECT p.name AS project_name, t.name AS task_name, 
               tr.duration_seconds, tr.start_time, tr.was_productive
        FROM time_records tr
        JOIN tasks t ON tr.task_id = t.id
        JOIN projects p ON t.project_id = p.id
        ORDER BY tr.start_time DESC
        ''')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.stats_table.setColumnCount(6)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        self.stats_table.setHorizontalHeaderLabels(
            ["–ü—Ä–æ–µ–∫—Ç", "–ó–∞–¥–∞—á–∞", "–í—Ä–µ–º—è", "–î–∞—Ç–∞", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—è"])

        for row_idx, row in enumerate(cursor.fetchall()):
            self.stats_table.insertRow(row_idx)

            project_item = QTableWidgetItem(row[0])
            task_item = QTableWidgetItem(row[1])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            hours, remainder = divmod(row[2], 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            time_item = QTableWidgetItem(time_str)

            date_item = QTableWidgetItem(row[3])
            productive_item = QTableWidgetItem("–î–∞" if row[4] else "–ù–µ—Ç")

            self.stats_table.setItem(row_idx, 0, project_item)
            self.stats_table.setItem(row_idx, 1, task_item)
            self.stats_table.setItem(row_idx, 2, time_item)
            self.stats_table.setItem(row_idx, 3, date_item)
            self.stats_table.setItem(row_idx, 4, productive_item)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
            btn.clicked.connect(lambda _, r=row_idx: self.delete_time_record(r))
            self.stats_table.setCellWidget(row_idx, 5, btn)

        self.stats_table.resizeColumnsToContents()

    def delete_time_record(self, row):
        record_id = self.stats_table.item(row, 0).data(Qt.UserRole)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –¥–∞–Ω–Ω—ã—Ö

        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No)

        if reply == QMessageBox.Yes:
            self.db.delete_time_record(record_id)
            self.update_stats_table()


    class ProjectDialog(QDialog):
        def __init__(self, parent=None, project=None):
            super().__init__(parent)
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if project else "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")

            layout = QVBoxLayout()
            self.name_edit = QLineEdit(project.name if project else "")
            layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"))
            layout.addWidget(self.name_edit)

            buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttons.accepted.connect(self.accept)
            buttons.rejected.connect(self.reject)
            layout.addWidget(buttons)

            self.setLayout(layout)

        def get_name(self):
            return self.name_edit.text().strip()

    class TaskDialog(QDialog):
        def __init__(self, parent=None, task=None):
            super().__init__(parent)
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É" if task else "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

            layout = QVBoxLayout()
            self.name_edit = QLineEdit(task.name if task else "")
            layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"))
            layout.addWidget(self.name_edit)

            buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttons.accepted.connect(self.accept)
            buttons.rejected.connect(self.reject)
            layout.addWidget(buttons)

            self.setLayout(layout)

        def get_name(self):
            return self.name_edit.text().strip()



    # –ü—Ä–æ–µ–∫—Ç—ã
    def add_project(self):
        dialog = ProjectDialog(self)
        if dialog.exec_() == QDialog.Accepted and dialog.get_name():
            self.db.add_project(dialog.get_name())
            self.update_projects_combo()

    def edit_project(self):
        if not self.project_combo.currentData():
            return

        project_id = self.project_combo.currentData()
        projects = self.db.get_projects()
        project = next((p for p in projects if p.id == project_id), None)

        if project:
            dialog = ProjectDialog(self, project)
            if dialog.exec_() == QDialog.Accepted and dialog.get_name():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –ë–î
                cursor = self.db.conn.cursor()
                cursor.execute(
                    "UPDATE projects SET name = ? WHERE id = ?",
                    (dialog.get_name(), project.id)
                )
                self.db.conn.commit()
                self.update_projects_combo()

    def delete_project(self):
        if not self.project_combo.currentData():
            return

        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No)

        if reply == QMessageBox.Yes:
            project_id = self.project_combo.currentData()
            # –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏, –∑–∞—Ç–µ–º –ø—Ä–æ–µ–∫—Ç
            cursor = self.db.conn.cursor()
            cursor.execute("DELETE FROM tasks WHERE project_id = ?", (project_id,))
            cursor.execute("DELETE FROM projects WHERE id = ?", (project_id,))
            self.db.conn.commit()
            self.update_projects_combo()
            self.task_combo.clear()

    # –ó–∞–¥–∞—á–∏
    def add_task(self):
        if not self.project_combo.currentData():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!")
            return

        dialog = TaskDialog(self)
        if dialog.exec_() == QDialog.Accepted and dialog.get_name():
            project_id = self.project_combo.currentData()
            self.db.add_task(project_id, dialog.get_name())
            self.update_tasks_combo()

    def edit_task(self):
        if not self.task_combo.currentData():
            return

        task_id = self.task_combo.currentData()
        tasks = self.db.get_tasks_for_project(self.project_combo.currentData())
        task = next((t for t in tasks if t.id == task_id), None)

        if task:
            dialog = TaskDialog(self, task)
            if dialog.exec_() == QDialog.Accepted and dialog.get_name():
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
                cursor = self.db.conn.cursor()
                cursor.execute(
                    "UPDATE tasks SET name = ? WHERE id = ?",
                    (dialog.get_name(), task.id)
                )
                self.db.conn.commit()
                self.update_tasks_combo()

    def delete_task(self):
        if not self.task_combo.currentData():
            return

        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No)

        if reply == QMessageBox.Yes:
            task_id = self.task_combo.currentData()
            # –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞—Ç–µ–º –∑–∞–¥–∞—á—É
            cursor = self.db.conn.cursor()
            cursor.execute("DELETE FROM time_records WHERE task_id = ?", (task_id,))
            cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            self.db.conn.commit()
            self.update_tasks_combo()

    def update_projects_combo(self):
        self.project_combo.clear()
        projects = self.db.get_projects()
        for project in projects:
            self.project_combo.addItem(project.name, project.id)

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        has_projects = len(projects) > 0
        self.edit_project_btn.setEnabled(has_projects)
        self.del_project_btn.setEnabled(has_projects)
        self.add_task_btn.setEnabled(has_projects)

    def update_tasks_combo(self):
        self.task_combo.clear()
        project_id = self.project_combo.currentData()
        if project_id:
            tasks = self.db.get_tasks_for_project(project_id)
            for task in tasks:
                self.task_combo.addItem(task.name, task.id)

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
        has_tasks = self.task_combo.count() > 0
        self.edit_task_btn.setEnabled(has_tasks)
        self.del_task_btn.setEnabled(has_tasks)