import sys

from PyQt5.QtMultimedia import QSound
from PyQt5.QtMultimedia import QSoundEffect
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QPushButton, QComboBox, QMessageBox, QTabWidget,
                             QTableWidget, QTableWidgetItem, QDialog, QLineEdit, QDialogButtonBox,
                             QMessageBox, QInputDialog, QAction, QCheckBox, QSpinBox, QDateEdit)
from PyQt5.QtCore import QTimer, Qt, QUrl, QDate
from models import Project, Task, TimeRecord
from database import Database
from settings import Settings
from timer_logic import Timer
from datetime import datetime, timedelta


class TimerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        try:
            QApplication.setStyle('Fusion')  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            self.settings = Settings()
            self.settings.load()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not hasattr(self.settings, 'loop_sound'):
                self.settings.loop_sound = False
                self.settings.save()

            self.db = Database()
            self.timer = Timer(self.on_timer_end)
            self.current_task_id = None

            # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏
            self.interval_spinbox = None
            self.sound_checkbox = None

            # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.add_project_btn = None
            self.edit_project_btn = None
            self.del_project_btn = None
            self.add_task_btn = None
            self.edit_task_btn = None
            self.del_task_btn = None

            self.setup_ui()
            self.setup_timers()
            self.setup_settings_menu()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞
            self.sound_effect = QSoundEffect()
            sound_file = QUrl.fromLocalFile("audio/audio1.wav")
            if sound_file.isValid():
                self.sound_effect.setSource(sound_file)
                self.sound_effect.setVolume(0.5)  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            sys.exit(1)

    def save_settings(self, dialog):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.settings.check_interval = self.interval_spinbox.value() * 60
        self.settings.enable_sound = self.sound_checkbox.isChecked()
        self.settings.loop_sound = self.loop_sound_checkbox.isChecked()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        self.settings.save()

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_timer.stop()
        self.check_timer.start(self.settings.check_interval * 1000)

        dialog.accept()
        QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    def show_settings_dialog(self):
        try:
            dialog = QDialog(self)
            dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            dialog.setWindowModality(Qt.WindowModal)

            layout = QVBoxLayout()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            interval_layout = QHBoxLayout()
            interval_label = QLabel("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω—É—Ç):")
            self.interval_spinbox = QSpinBox()
            self.interval_spinbox.setRange(1, 120)
            self.interval_spinbox.setValue(int(self.settings.check_interval // 60))  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
            interval_layout.addWidget(interval_label)
            interval_layout.addWidget(self.interval_spinbox)
            layout.addLayout(interval_layout)

            # –ß–µ–∫–±–æ–∫—Å –∑–≤—É–∫–∞
            self.sound_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–ª–µ–≤–æ–µ
            sound_enabled = bool(self.settings.enable_sound)
            self.sound_checkbox.setChecked(sound_enabled)
            layout.addWidget(self.sound_checkbox)

            # –ß–µ–∫–±–æ–∫—Å —Ü–∏–∫–ª–∏—á–Ω–æ–≥–æ –∑–≤—É–∫–∞
            self.loop_sound_checkbox = QCheckBox("–¶–∏–∫–ª–∏—á–Ω—ã–π –∑–≤—É–∫")
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–ª–µ–≤–æ–µ
            loop_sound_enabled = bool(self.settings.loop_sound)
            self.loop_sound_checkbox.setChecked(loop_sound_enabled)
            self.loop_sound_checkbox.setEnabled(sound_enabled)  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
            layout.addWidget(self.loop_sound_checkbox)

            # –°–≤—è–∑—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
            self.sound_checkbox.stateChanged.connect(
                lambda state: self.loop_sound_checkbox.setEnabled(state == Qt.Checked)
            )

            # –ö–Ω–æ–ø–∫–∏
            buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttons.accepted.connect(lambda: self.save_settings(dialog))
            buttons.rejected.connect(dialog.reject)
            layout.addWidget(buttons)

            dialog.setLayout(layout)
            dialog.exec_()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ show_settings_dialog: {repr(e)}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def setup_settings_menu(self):
        print("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        menubar = self.menuBar()
        print(f"–ú–µ–Ω—é-–±–∞—Ä: {menubar}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ menubar —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        settings_menu = menubar.addMenu('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

        settings_action = QAction('–ù–∞—Å—Ç—Ä–æ–π–∫–∏...', self)
        settings_action.triggered.connect(self.show_settings_dialog)
        settings_menu.addAction(settings_action)
        print("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω–æ")  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è

    def change_check_interval(self):
        minutes, ok = QInputDialog.getInt(
            self, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞',
            '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω—É—Ç—ã):',
            value=self.settings.check_interval // 60,
            min=1, max=120, step=1)

        if ok:
            self.settings.check_interval = minutes * 60
            self.settings.save()
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            self.check_timer.stop()
            self.check_timer.start(self.settings.check_interval * 1000)
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                                    f"–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {minutes} –º–∏–Ω—É—Ç")





    def setup_ui(self):
        self.setWindowTitle("Task Timer")
        self.setGeometry(100, 100, 600, 400)


        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QVBoxLayout(main_widget)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)

        # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_management_buttons()

        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.setup_timer_tab()  # This initializes task_combo
        self.setup_stats_tab()

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–æ–º–±–æ–±–æ–∫—Å—ã
        self.update_projects_combo()  # Moved after setup_timer_tab()


    def setup_management_buttons(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        self.add_project_btn = QPushButton("+ –ü—Ä–æ–µ–∫—Ç")
        self.edit_project_btn = QPushButton("‚úé –ü—Ä–æ–µ–∫—Ç")
        self.del_project_btn = QPushButton("üóë –ü—Ä–æ–µ–∫—Ç")
        self.add_task_btn = QPushButton("+ –ó–∞–¥–∞—á–∞")
        self.edit_task_btn = QPushButton("‚úé –ó–∞–¥–∞—á–∞")
        self.del_task_btn = QPushButton("üóë –ó–∞–¥–∞—á–∞")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.add_project_btn.clicked.connect(self.add_project)
        self.edit_project_btn.clicked.connect(self.edit_project)
        self.del_project_btn.clicked.connect(self.delete_project)
        self.add_task_btn.clicked.connect(self.add_task)
        self.edit_task_btn.clicked.connect(self.edit_task)
        self.del_task_btn.clicked.connect(self.delete_task)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.edit_project_btn.setEnabled(False)
        self.del_project_btn.setEnabled(False)
        self.add_task_btn.setEnabled(False)
        self.edit_task_btn.setEnabled(False)
        self.del_task_btn.setEnabled(False)

    def setup_timer_tab(self):
        timer_tab = QWidget()
        timer_layout = QVBoxLayout(timer_tab)

        # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        self.project_combo = QComboBox()
        timer_layout.addWidget(QLabel("–ü—Ä–æ–µ–∫—Ç:"))
        timer_layout.addWidget(self.project_combo)

        # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
        self.task_combo = QComboBox()
        timer_layout.addWidget(QLabel("–ó–∞–¥–∞—á–∞:"))
        timer_layout.addWidget(self.task_combo)
        self.project_combo.currentIndexChanged.connect(self.update_tasks_combo)

        # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –æ–±–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Å–æ–∑–¥–∞–Ω—ã, –º–æ–∂–Ω–æ –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        self.update_projects_combo()  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è task_combo

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏/–∑–∞–¥–∞—á–∞–º–∏
        buttons_container = QWidget()
        mgmt_layout = QHBoxLayout(buttons_container)
        mgmt_layout.addWidget(self.add_project_btn)
        mgmt_layout.addWidget(self.edit_project_btn)
        mgmt_layout.addWidget(self.del_project_btn)
        mgmt_layout.addWidget(QLabel(" | "))
        mgmt_layout.addWidget(self.add_task_btn)
        mgmt_layout.addWidget(self.edit_task_btn)
        mgmt_layout.addWidget(self.del_task_btn)
        timer_layout.addWidget(buttons_container)

        # –¢–∞–π–º–µ—Ä
        self.timer_label = QLabel("00:00:00")
        self.timer_label.setAlignment(Qt.AlignCenter)
        self.timer_label.setStyleSheet("font-size: 36px;")
        timer_layout.addWidget(self.timer_label)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        timer_buttons = QHBoxLayout()
        self.start_button = QPushButton("–°—Ç–∞—Ä—Ç")
        self.pause_button = QPushButton("–ü–∞—É–∑–∞")
        self.stop_button = QPushButton("–°—Ç–æ–ø")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        self.reset_button = QPushButton("–°–±—Ä–æ—Å")

        self.start_button.clicked.connect(self.start_timer)
        self.pause_button.clicked.connect(self.pause_timer)
        self.stop_button.clicked.connect(self.stop_timer)  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.reset_button.clicked.connect(self.reset_timer)

        timer_buttons.addWidget(self.start_button)
        timer_buttons.addWidget(self.pause_button)
        timer_buttons.addWidget(self.stop_button)
        timer_buttons.addWidget(self.reset_button)

        timer_layout.addLayout(timer_buttons)
        self.tabs.addTab(timer_tab, "–¢–∞–π–º–µ—Ä")
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: #ff4444;
                color: white;
                font-weight: bold;
                border-radius: 4px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #cc0000;
            }
        """)

    def setup_stats_tab(self):
        stats_tab = QWidget()
        stats_layout = QVBoxLayout(stats_tab)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_widget = QWidget()
        filter_layout = QHBoxLayout(filter_widget)

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        self.filter_project_combo = QComboBox()
        self.filter_project_combo.addItem("–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", None)

        # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–¥–∞—á–µ
        self.filter_task_combo = QComboBox()
        self.filter_task_combo.addItem("–í—Å–µ –∑–∞–¥–∞—á–∏", None)

        # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ
        date_filter_widget = QWidget()
        date_filter_layout = QHBoxLayout(date_filter_widget)

        # –î–∞—Ç–∞ "–æ—Ç"
        self.date_from_edit = QDateEdit()
        self.date_from_edit.setDisplayFormat("dd.MM.yyyy")
        self.date_from_edit.setDate(datetime.now().date())

        # –î–∞—Ç–∞ "–¥–æ"
        self.date_to_edit = QDateEdit()
        self.date_to_edit.setDisplayFormat("dd.MM.yyyy")
        self.date_to_edit.setDate(datetime.now().date())

        date_filter_layout.addWidget(QLabel("–î–∞—Ç–∞ –æ—Ç:"))
        date_filter_layout.addWidget(self.date_from_edit)
        date_filter_layout.addWidget(QLabel("–¥–æ:"))
        date_filter_layout.addWidget(self.date_to_edit)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        self.filter_project_combo.currentIndexChanged.connect(
            lambda: self.update_filter_task_combo()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.filter_project_combo.currentIndexChanged.connect(self.update_stats_table)
        self.filter_task_combo.currentIndexChanged.connect(self.update_stats_table)
        self.date_from_edit.dateChanged.connect(self.update_stats_table)
        self.date_to_edit.dateChanged.connect(self.update_stats_table)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filter_layout.addWidget(QLabel("–ü—Ä–æ–µ–∫—Ç:"))
        filter_layout.addWidget(self.filter_project_combo)
        filter_layout.addWidget(QLabel("–ó–∞–¥–∞—á–∞:"))
        filter_layout.addWidget(self.filter_task_combo)
        filter_layout.addWidget(date_filter_widget)

        self.apply_filter_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        self.apply_filter_btn.clicked.connect(self.update_stats_table)
        filter_layout.addWidget(self.apply_filter_btn)

        stats_layout.addWidget(filter_widget)

        # –û–±—â–µ–µ –≤—Ä–µ–º—è (–¥–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        self.total_time_label = QLabel("–û–±—â–µ–µ –≤—Ä–µ–º—è: 00:00:00")
        self.total_time_label.setStyleSheet("font-size: 14px; font-weight: bold;")
        stats_layout.addWidget(self.total_time_label)

        # –¢–∞–±–ª–∏—Ü–∞ (–¥–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        self.stats_table = QTableWidget()
        self.stats_table.setColumnCount(6)
        self.stats_table.setHorizontalHeaderLabels(
            ["–ü—Ä–æ–µ–∫—Ç", "–ó–∞–¥–∞—á–∞", "–í—Ä–µ–º—è", "–î–∞—Ç–∞", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—è"])
        stats_layout.addWidget(self.stats_table)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É (—ç—Ç–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
        self.tabs.addTab(stats_tab, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã–º–∏
        self.update_filter_combos()

    def update_filter_combos(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_project = self.filter_project_combo.currentData()
        current_task = self.filter_task_combo.currentData()

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.filter_project_combo.blockSignals(True)
        self.filter_task_combo.blockSignals(True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.filter_project_combo.clear()
        self.filter_project_combo.addItem("–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", None)

        projects = self.db.get_projects()
        for project in projects:
            self.filter_project_combo.addItem(project.name, project.id)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        if current_project:
            index = self.filter_project_combo.findData(current_project)
            if index >= 0:
                self.filter_project_combo.setCurrentIndex(index)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –∑–∞–¥–∞—á –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        self.update_filter_task_combo(current_task)

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.filter_project_combo.blockSignals(False)
        self.filter_task_combo.blockSignals(False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–µ–≥–æ–¥–Ω—è)
        today = QDate.currentDate()
        self.date_from_edit.setDate(today)
        self.date_to_edit.setDate(today)

        print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for p in projects:
            print(f"–ü—Ä–æ–µ–∫—Ç: {p.id} - {p.name}")

    def update_filter_task_combo(self, current_task=None):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
        current_task_id = current_task if current_task else self.filter_task_combo.currentData()

        self.filter_task_combo.clear()
        self.filter_task_combo.addItem("–í—Å–µ –∑–∞–¥–∞—á–∏", None)

        project_id = self.filter_project_combo.currentData()
        if project_id:
            tasks = self.db.get_tasks_for_project(project_id)
            for task in tasks:
                self.filter_task_combo.addItem(task.name, task.id)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
        if current_task_id:
            index = self.filter_task_combo.findData(current_task_id)
            if index >= 0:
                self.filter_task_combo.setCurrentIndex(index)

    def setup_timers(self):
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.display_timer = QTimer(self)
        self.display_timer.timeout.connect(self.update_display)
        self.display_timer.start(1000)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        self.check_timer = QTimer(self)
        self.check_timer.timeout.connect(self.check_work_time)
        self.check_timer.start(self.settings.check_interval * 1000)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    def update_projects_combo(self):
        self.project_combo.clear()
        projects = self.db.get_projects()
        for project in projects:
            self.project_combo.addItem(project.name, project.id)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        self.update_tasks_combo()

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        has_projects = len(projects) > 0
        self.edit_project_btn.setEnabled(has_projects)
        self.del_project_btn.setEnabled(has_projects)
        self.add_task_btn.setEnabled(has_projects)

    def update_tasks_combo(self):
        self.task_combo.clear()
        project_id = self.project_combo.currentData()

        if project_id:
            tasks = self.db.get_tasks_for_project(project_id)
            for task in tasks:
                self.task_combo.addItem(task.name, task.id)

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á
        has_tasks = self.task_combo.count() > 0
        self.edit_task_btn.setEnabled(has_tasks)
        self.del_task_btn.setEnabled(has_tasks)

    def update_display(self):
        elapsed = self.timer.get_elapsed_time()
        self.timer_label.setText(self.timer.format_time(elapsed))

    def check_work_time(self):
        if not self.timer.is_running:
            return

        try:
            elapsed = self.timer.get_elapsed_time()
            was_running = self.timer.is_running
            self.timer.pause()

            if self.settings.enable_sound and self.sound_effect.isLoaded():
                if self.settings.loop_sound:
                    self.sound_effect.setLoopCount(QSoundEffect.Infinite)
                self.sound_effect.play()

            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                f"–í—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {elapsed // 60} –º–∏–Ω. {elapsed % 60} —Å–µ–∫.?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )

            self.sound_effect.stop()

            if reply == QMessageBox.Yes:
                self.save_time_record(elapsed)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                self.timer.reset()
                if was_running:  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
                    self.timer.start()
            else:
                self.timer.reset()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_work_time: {e}")
            self.timer.reset()
        finally:
            self.check_timer.start(self.settings.check_interval * 1000)

    def play_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if self.settings.loop_sound:
                self.sound_effect.setLoopCount(QSoundEffect.Infinite)
            else:
                self.sound_effect.setLoopCount(1)
            self.sound_effect.play()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")

    def start_timer(self):
        if self.task_combo.currentIndex() == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É!")
            return

        self.current_task_id = self.task_combo.currentData()
        self.timer.start()
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        self.check_timer.stop()
        self.check_timer.start(self.settings.check_interval * 1000)

    def pause_timer(self):
        if self.timer.is_running:
            self.timer.pause()
        else:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ", "–¢–∞–π–º–µ—Ä —É–∂–µ –Ω–∞ –ø–∞—É–∑–µ")

    def reset_timer(self):
        if self.timer.get_elapsed_time() > 0:
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No)

            if reply == QMessageBox.Yes:
                self.timer.reset()
        else:
            self.timer.reset()
        self.update_display()

    def stop_timer(self):
        try:
            if not self.timer.is_running and self.timer.get_elapsed_time() == 0:
                return

            elapsed = self.timer.get_elapsed_time()
            if elapsed > 0:
                reply = QMessageBox.question(
                    self, '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
                    f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å {self.timer.format_time(elapsed)} —Ä–∞–±–æ—Ç—ã?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.Yes)

                if reply == QMessageBox.Yes:
                    if self.save_time_record(elapsed):
                        self.timer.reset()
                        self.update_display()
                    else:
                        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                        return
            else:
                self.timer.reset()
                self.update_display()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ stop_timer: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä: {str(e)}")
            self.timer.reset()

    def save_time_record(self, elapsed_seconds: int):
        if not self.current_task_id or elapsed_seconds <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ –Ω—É–ª—é")
            return False

        try:
            end_time = datetime.now()
            start_time = end_time - timedelta(seconds=elapsed_seconds)

            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            record = self.db.add_time_record(
                task_id=self.current_task_id,
                start_time=start_time,
                end_time=end_time,
                duration_seconds=elapsed_seconds,
                was_productive=True
            )

            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                                    f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {elapsed_seconds} —Å–µ–∫—É–Ω–¥")
            self.update_stats_table()
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")
            return False

    def on_timer_end(self, elapsed_seconds: int):
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–í—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes)

        if reply == QMessageBox.Yes:
            self.save_time_record(elapsed_seconds)

        self.timer.reset()

    def update_stats_table(self):
        try:
            project_id = self.filter_project_combo.currentData()
            task_id = self.filter_task_combo.currentData()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            date_from = self.date_from_edit.date().toPyDate()
            date_to = self.date_to_edit.date().toPyDate()

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º date_to, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –≤–µ—Å—å –¥–µ–Ω—å
            date_to = datetime.combine(date_to, datetime.max.time()).date()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            cursor = self.db.conn.cursor()
            query = '''
                SELECT tr.id, p.name AS project_name, t.name AS task_name, 
                       tr.duration_seconds, tr.start_time, tr.was_productive
                FROM time_records tr
                JOIN tasks t ON tr.task_id = t.id
                JOIN projects p ON t.project_id = p.id
                WHERE date(tr.start_time) BETWEEN ? AND ?
                '''
            params = [date_from.isoformat(), date_to.isoformat()]

            if project_id:
                query += ' AND p.id = ?'
                params.append(project_id)
            if task_id:
                query += ' AND t.id = ?'
                params.append(task_id)

            query += ' ORDER BY tr.start_time DESC'

            cursor.execute(query, params)
            rows = cursor.fetchall()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.stats_table.setRowCount(0)
            self.stats_table.setColumnCount(6)
            self.stats_table.setHorizontalHeaderLabels(
                ["–ü—Ä–æ–µ–∫—Ç", "–ó–∞–¥–∞—á–∞", "–í—Ä–µ–º—è", "–î–∞—Ç–∞", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ", "–î–µ–π—Å—Ç–≤–∏—è"])

            total_seconds = 0

            for row_idx, row in enumerate(rows):
                self.stats_table.insertRow(row_idx)

                project_item = QTableWidgetItem(row[1])
                task_item = QTableWidgetItem(row[2])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                hours, remainder = divmod(row[3], 3600)
                minutes, seconds = divmod(remainder, 60)
                time_str = f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
                time_item = QTableWidgetItem(time_str)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    dt = datetime.fromisoformat(row[4])
                    date_str = dt.strftime("%d.%m.%Y %H:%M:%S")
                except:
                    date_str = row[4]

                date_item = QTableWidgetItem(date_str)

                # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                total_seconds += row[3]

                productive_item = QTableWidgetItem("–î–∞" if row[5] else "–ù–µ—Ç")

                self.stats_table.setItem(row_idx, 0, project_item)
                self.stats_table.setItem(row_idx, 1, task_item)
                self.stats_table.setItem(row_idx, 2, time_item)
                self.stats_table.setItem(row_idx, 3, date_item)
                self.stats_table.setItem(row_idx, 4, productive_item)

                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
                btn.clicked.connect(lambda _, r=row_idx: self.delete_time_record(r))
                self.stats_table.setCellWidget(row_idx, 5, btn)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
            total_hours, remainder = divmod(total_seconds, 3600)
            total_minutes, total_seconds = divmod(remainder, 60)
            self.total_time_label.setText(
                f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:02d}:{total_minutes:02d}:{total_seconds:02d}")

            self.stats_table.resizeColumnsToContents()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

    def delete_time_record(self, row):
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        record_id = self.stats_table.item(row, 0).data(Qt.UserRole)

        # –ï—Å–ª–∏ ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not record_id:
            project_name = self.stats_table.item(row, 0).text()
            task_name = self.stats_table.item(row, 1).text()
            time_str = self.stats_table.item(row, 2).text()

            # –ù–∞–π–¥–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor = self.db.conn.cursor()
            cursor.execute('''
            SELECT tr.id FROM time_records tr
            JOIN tasks t ON tr.task_id = t.id
            JOIN projects p ON t.project_id = p.id
            WHERE p.name = ? AND t.name = ? AND tr.duration_seconds = ?
            ''', (project_name, task_name, self._time_str_to_seconds(time_str)))

            result = cursor.fetchone()
            if result:
                record_id = result[0]

        if record_id:
            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No)

            if reply == QMessageBox.Yes:
                if self.db.delete_time_record(record_id):
                    self.update_stats_table()
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")

    def _time_str_to_seconds(self, time_str):
        h, m, s = map(int, time_str.split(':'))
        return h * 3600 + m * 60 + s

    class ProjectDialog(QDialog):
        def __init__(self, parent=None, project=None):
            super().__init__(parent)
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç" if project else "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")

            layout = QVBoxLayout()
            self.name_edit = QLineEdit(project.name if project else "")
            layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"))
            layout.addWidget(self.name_edit)

            buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttons.accepted.connect(self.accept)
            buttons.rejected.connect(self.reject)
            layout.addWidget(buttons)

            self.setLayout(layout)

        def get_name(self):
            return self.name_edit.text().strip()

    class TaskDialog(QDialog):
        def __init__(self, parent=None, task=None):
            super().__init__(parent)
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É" if task else "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

            layout = QVBoxLayout()
            self.name_edit = QLineEdit(task.name if task else "")
            layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"))
            layout.addWidget(self.name_edit)

            buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            buttons.accepted.connect(self.accept)
            buttons.rejected.connect(self.reject)
            layout.addWidget(buttons)

            self.setLayout(layout)

        def get_name(self):
            return self.name_edit.text().strip()



    # –ü—Ä–æ–µ–∫—Ç—ã
    def add_project(self):
        try:
            dialog = self.ProjectDialog(self)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.ProjectDialog
            if dialog.exec_() == QDialog.Accepted:
                name = dialog.get_name()
                if name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
                    self.db.add_project(name)
                    self.update_projects_combo()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: {str(e)}")

    def edit_project(self):
        if not self.project_combo.currentData():
            return

        project_id = self.project_combo.currentData()
        projects = self.db.get_projects()
        project = next((p for p in projects if p.id == project_id), None)

        if project:
            dialog = ProjectDialog(self, project)
            if dialog.exec_() == QDialog.Accepted and dialog.get_name():
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –ë–î
                cursor = self.db.conn.cursor()
                cursor.execute(
                    "UPDATE projects SET name = ? WHERE id = ?",
                    (dialog.get_name(), project.id)
                )
                self.db.conn.commit()
                self.update_projects_combo()

    def delete_project(self):
        if not self.project_combo.currentData():
            return

        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No)

        if reply == QMessageBox.Yes:
            project_id = self.project_combo.currentData()
            # –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏, –∑–∞—Ç–µ–º –ø—Ä–æ–µ–∫—Ç
            cursor = self.db.conn.cursor()
            cursor.execute("DELETE FROM tasks WHERE project_id = ?", (project_id,))
            cursor.execute("DELETE FROM projects WHERE id = ?", (project_id,))
            self.db.conn.commit()
            self.update_projects_combo()
            self.task_combo.clear()

    # –ó–∞–¥–∞—á–∏
    def add_task(self):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç
            if not self.project_combo.currentData():
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!")
                return

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            dialog = self.TaskDialog(self)
            if dialog.exec_() == QDialog.Accepted:
                name = dialog.get_name()
                if name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
                    project_id = self.project_combo.currentData()
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º)
                    QApplication.processEvents()
                    self.db.add_task(project_id, name)
                    self.update_tasks_combo()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:\n{str(e)}")

    def edit_task(self):
        if not self.task_combo.currentData():
            return

        task_id = self.task_combo.currentData()
        tasks = self.db.get_tasks_for_project(self.project_combo.currentData())
        task = next((t for t in tasks if t.id == task_id), None)

        if task:
            dialog = TaskDialog(self, task)
            if dialog.exec_() == QDialog.Accepted and dialog.get_name():
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
                cursor = self.db.conn.cursor()
                cursor.execute(
                    "UPDATE tasks SET name = ? WHERE id = ?",
                    (dialog.get_name(), task.id)
                )
                self.db.conn.commit()
                self.update_tasks_combo()

    def delete_task(self):
        if not self.task_combo.currentData():
            return

        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No)

        if reply == QMessageBox.Yes:
            task_id = self.task_combo.currentData()
            # –£–¥–∞–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞—Ç–µ–º –∑–∞–¥–∞—á—É
            cursor = self.db.conn.cursor()
            cursor.execute("DELETE FROM time_records WHERE task_id = ?", (task_id,))
            cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            self.db.conn.commit()
            self.update_tasks_combo()

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
        has_projects = len(projects) > 0
        self.edit_project_btn.setEnabled(has_projects)
        self.del_project_btn.setEnabled(has_projects)
        self.add_task_btn.setEnabled(has_projects)
